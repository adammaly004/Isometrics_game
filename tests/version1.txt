import pygame
from sys import exit
from random import randint, choice

from constants import *


pygame.init()

# Start pygame
screen = pygame.display.set_mode((WIDTH, HEIGHT))
clock = pygame.time.Clock()
pygame.display.set_caption(NAME)

# Assets
grass = pygame.image.load('img/grass.png').convert_alpha()
grass1 = pygame.image.load('img/grass1.png').convert_alpha()
grass2 = pygame.image.load('img/grass2.png').convert_alpha()
stone = pygame.image.load('img/stone.png').convert_alpha()
stone1 = pygame.image.load('img/stone1.png').convert_alpha()
bush = pygame.image.load('img/bush.png').convert_alpha()
flower = pygame.image.load('img/flower.png').convert_alpha()
water = pygame.image.load('img/water.png').convert_alpha()


player_up1 = pygame.image.load('img/player/up1.png').convert_alpha()
player_up2 = pygame.image.load('img/player/up2.png').convert_alpha()
player_up3 = pygame.image.load('img/player/up3.png').convert_alpha()
player_up4 = pygame.image.load('img/player/up4.png').convert_alpha()

player_down1 = pygame.image.load('img/player/down1.png').convert_alpha()
player_down2 = pygame.image.load('img/player/down2.png').convert_alpha()
player_down3 = pygame.image.load('img/player/down3.png').convert_alpha()
player_down4 = pygame.image.load('img/player/down4.png').convert_alpha()


block = pygame.image.load('img/block.png').convert_alpha()
enemy_down1 = pygame.image.load('img/enemy1/down0.png').convert_alpha()
enemy_down2 = pygame.image.load('img/enemy1/down2.png').convert_alpha()

enemy_death1 = pygame.image.load('img/enemy1/down3.png').convert_alpha()
enemy_death2 = pygame.image.load('img/enemy1/down4.png').convert_alpha()
enemy_death3 = pygame.image.load('img/enemy1/down5.png').convert_alpha()
enemy_death4 = pygame.image.load('img/enemy1/down6.png').convert_alpha()
enemy_death5 = pygame.image.load('img/enemy1/down7.png').convert_alpha()

enemy_up1 = pygame.image.load('img/enemy/up1.png').convert_alpha()
enemy_up2 = pygame.image.load('img/enemy/up2.png').convert_alpha()

gun = pygame.image.load('img/guns/shot_side.png').convert_alpha()


class Block:
    def __init__(self, x, y, width, height, image, floor):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.image = image
        self.image = pygame.transform.scale(
            self.image, (self.width, self.height))
        self.rect = self.image.get_rect(topleft=(self.x, self.y))
        self.floor = floor

    def draw(self):
        off_set = NUMBER_OF_BLOCKS * \
            (NUMBER_OF_BLOCKS / 2 / NUMBER_OF_BLOCKS) * \
            self.width - self.width / 2

        self.rect.x = (self.x * 1 + self.y * -1) * self.width / 2 + off_set
        self.rect.y = (self.x * 0.5 + self.y * 0.5) * self.height / 2

        screen.blit(self.image, self.rect)
        self.collide_point = pygame.Rect(
            self.rect.centerx - 5, self.rect.centery - 10, 15, 1)

        if HITBOX:
            pygame.draw.rect(screen, RED,  self.collide_point)

        # pygame.draw.polygon(screen, (255, 255, 255), [
            # (self.rect.x + 32, self.rect.y + 8), (self.rect.x + 64, self.rect.y + 24), (self.rect.x + 32, self.rect.y + 40), (self.rect.x, self.rect.y + 24)])


class IsoMap:
    def __init__(self, map, block):
        self.map = map
        self.blocks = []
        self.block = block

    def create_map(self):
        for floor in range(len(self.map)):
            for i in range(len(self.map[floor])):
                for j in range(len(self.map[floor])):
                    if self.map[floor][i][j] == 0:
                        continue
                    elif self.map[floor][i][j] == 1:
                        self.blocks.append(
                            self.block(i - floor * 0.5, j - floor * 0.5, PIXELS, PIXELS, grass, floor))
                    elif self.map[floor][i][j] == 2:
                        self.blocks.append(
                            self.block(i - floor * 0.5, j - floor * 0.5, PIXELS, PIXELS, grass1, floor))
                    elif self.map[floor][i][j] == 3:
                        self.blocks.append(
                            self.block(i - floor * 0.5, j - floor * 0.5, PIXELS, PIXELS, grass2, floor))
                    elif self.map[floor][i][j] == 4:
                        self.blocks.append(
                            self.block(i - floor * 0.5, j - floor * 0.5, PIXELS, PIXELS, stone, floor))
                    elif self.map[floor][i][j] == 5:
                        self.blocks.append(
                            self.block(i - floor * 0.5, j - floor * 0.5, PIXELS, PIXELS, stone1, floor))
                    elif self.map[floor][i][j] == 6:
                        self.blocks.append(
                            self.block(i - floor * 0.5, j - floor * 0.5, PIXELS, PIXELS, water, floor))
                    elif self.map[floor][i][j] == 7:
                        self.blocks.append(
                            self.block(i - floor * 0.5, j - floor * 0.5, PIXELS, PIXELS, bush, floor))
                    elif self.map[floor][i][j] == 8:
                        self.blocks.append(
                            self.block(i - floor * 0.5, j - floor * 0.5, PIXELS, PIXELS, flower, floor))

    def draw(self, player, enemies):
        for layer1 in self.blocks:
            layer1.draw()
            player.collision(layer1)
            for enemy in enemies:
                enemy.collision(layer1)

        player.draw()

        for layer2 in self.blocks:
            if layer2.floor > player.last_collistion and player.rect.bottom < layer2.rect.bottom - 16 or layer2.floor > player.last_collistion + 1:
                layer2.draw()

        for enemy in enemies:
            enemy.draw()
            enemy.move(player)
            enemy.animation(enemies)
            player.collision_enemy(enemy)


class AbstractMoveableObject:
    def __init__(self, x, y, width, height):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.image = block
        self.image = pygame.transform.scale(
            self.image, (self.width, self.height))
        self.rect = self.image.get_rect(topleft=(self.x, self.y))
        self.last_collistion = 2
        self.collide_point = pygame.Rect(
            self.rect.centerx, self.rect.centery - 20, 2, 40)

    def draw(self):
        screen.blit(self.image, self.rect)
        self.collide_point = pygame.Rect(
            self.rect.centerx, self.rect.centery + 0, 1, 30)

        # Hitbox
        if HITBOX:
            pygame.draw.rect(screen, RED,  self.collide_point)

    def collision(self, block):
        if self.collide_point.colliderect(block.collide_point):
            if block.floor == 0 and self.last_collistion == 1:
                self.last_collistion = block.floor
                self.rect.y += 16
                self.rect.x -= 1

            if block.floor == 1 and self.last_collistion == 0:
                self.last_collistion = block.floor
                self.rect.y -= 16
                self.rect.x += 1

            if block.floor == 1 and self.last_collistion == 2:
                self.last_collistion = block.floor
                self.rect.y += 16
                self.rect.x -= 1

            if block.floor == 2 and self.last_collistion == 1:
                self.last_collistion = block.floor
                self.rect.y -= 16
                self.rect.x += 1

            if block.floor == 2 and self.last_collistion == 3:
                self.last_collistion = block.floor
                self.rect.y += 16
                self.rect.x -= 1

            if block.floor == 3 and self.last_collistion == 2:
                self.last_collistion = block.floor
                self.rect.y -= 16
                self.rect.x += 1


class Player(AbstractMoveableObject):
    def __init__(self, x, y, width, height):
        super().__init__(x, y, width, height)
        self.player_walk_down = [player_down1,
                                 player_down2, player_down3, player_down4]
        self.player_walk_up = [player_up1,
                               player_up2, player_up3, player_up4]
        self.player_index = 0
        self.image = self.player_walk_down[self.player_index]
        self.image = pygame.transform.scale(
            self.image, (self.width, self.height))
        self.rect = self.image.get_rect(topleft=(self.x, self.y))

        self.direction = ''

        # Shooting
        self.armed = False
        self.fire = False
        self.shoot_cooldown = 0
        self.ammo = 0

        self.health = 100

    def move(self, direction):
        self.direction = direction
        if direction == 'left':
            self.rect.y -= 1
            self.rect.x -= 2
            self.image = pygame.transform.flip(
                self.player_walk_up[int(self.player_index)], True, False)

        if direction == 'right':
            self.rect.y += 1
            self.rect.x += 2
            self.image = self.player_walk_down[int(self.player_index)]

        if direction == 'up':
            self.rect.y -= 1
            self.rect.x += 2
            self.image = self.player_walk_up[int(self.player_index)]

        if direction == 'down':
            self.rect.y += 1
            self.rect.x -= 2
            self.image = pygame.transform.flip(
                self.player_walk_down[int(self.player_index)], True, False)

        self.image = pygame.transform.scale(
            self.image, (self.width, self.height))

    def animation(self):
        self.player_index += 0.2
        if self.player_index >= len(self.player_walk_down):
            self.player_index = 0

    def shoot(self, bullets):
        if self.armed and self.fire:
            bullet = Bullet(self.rect.centerx, self.rect.centery)
            bullets.append(bullet)
            self.fire = False
            self.ammo -= 1

        self.shoot_cooldown -= 1

    def collision_fireball(self, fireball):
        if self.rect.x + self.width > fireball.x and self.rect.x < fireball.x + 20 and self.rect.y + self.height > fireball.y and self.rect.y < fireball.y + 20:
            self.health -= 0.2

    def collision_enemy(self, enemy):
        if self.rect.colliderect(enemy.rect):
            self.health -= 0.2


class Bullet:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.speed = 3
        self.rect = pygame.Rect(self.x, self.y, 5.0, 5.0)
        self.direction = ''
        # self.rect = self.image.get_rect(center=(self.x, self.y))

    def move(self, direction):
        if self.direction == '':
            self.direction = direction

        if self.direction == 'left':
            self.rect.y -= 1 * self.speed
            self.rect.x -= 2 * self.speed

        if self.direction == 'right':
            self.rect.y += 1 * self.speed
            self.rect.x += 2 * self.speed

        if self.direction == 'up':
            self.rect.y -= 1 * self.speed
            self.rect.x += 2 * self.speed

        if self.direction == 'down':
            self.rect.y += 1 * self.speed
            self.rect.x -= 2 * self.speed

    def draw(self):
        if HITBOX:
            pygame.draw.rect(screen, RED, self.rect, 2)
        # screen.blit(self.image, self.rect)
        pygame.draw.rect(screen, RED, self.rect)

    def update(self, direction):
        self.draw()
        self.move(direction)


class Enemy(AbstractMoveableObject):
    def __init__(self, x, y, width, height, player):
        super().__init__(x, y, width, height)
        self.enemy_walk_down = [enemy_down1, enemy_down2]
        self.enemy_walk_up = [enemy_up1, enemy_up2]

        self.enemy_death = [enemy_down1, enemy_death1, enemy_death2,
                            enemy_death3, enemy_death4, enemy_death5]

        self.enemy_index = 0
        self.image = self.enemy_walk_down[self.enemy_index]
        self.image = pygame.transform.scale(
            self.image, (self.width, self.height))
        self.rect = self.image.get_rect(topleft=(self.x, self.y))

        self.timer = 0

        self.directionx = (player.rect.centerx - self.rect.centerx)
        self.directiony = (player.rect.centery - self.rect.centery)

        self.speedx = 0
        self.speedy = 0

        self.enemy_alive = True

    def move(self, player):
        if self.enemy_alive:
            if self.timer <= 16:
                self.rect.x += self.speedx
                self.rect.y += self.speedy

            elif self.timer > ENEMY_SPEED:
                self.timer = 0
                self.directionx = (player.rect.centerx - self.rect.centerx)
                self.directiony = (player.rect.centery - self.rect.centery)

                if self.directionx < 0:
                    self.speedx = -2
                    self.image = pygame.transform.flip(
                        self.image, True, False)
                if self.directiony >= 0:
                    self.speedy = 1
                    self.image = self.enemy_walk_down[int(self.enemy_index)]
                if self.directiony < 0:
                    self.speedy = -1
                    self.image = self.enemy_walk_up[int(self.enemy_index)]
                if self.directionx >= 0:
                    self.speedx = 2
                    self.image = pygame.transform.flip(
                        self.image, True, False)

            self.timer += 1

        self.image = pygame.transform.scale(
            self.image, (self.width, self.height))

        if HITBOX:
            pygame.draw.line(screen, GREEN, [player.rect.centerx, player.rect.centery], [
                self.rect.centerx, self.rect.centery], 5)

    def bullet_collision(self, bullet):
        if self.rect.colliderect(bullet.rect):
            self.enemy_alive = False
            self.enemy_index = 0
            # enemies.remove(self)

    def animation(self, enemies):

        if self.enemy_alive:
            self.enemy_index += 0.5
            if self.enemy_index >= len(self.enemy_walk_down):
                self.enemy_index = 0
        else:
            self.enemy_index += 0.1
            if self.enemy_index >= len(self.enemy_death):
                self.enemy_index = len(self.enemy_death) - 1
                enemies.remove(self)
            self.image = self.enemy_death[int(self.enemy_index)]
            if self.directionx > 0:
                self.image = pygame.transform.flip(
                    self.image, True, False)


class AbstractCollectableItem:
    def __init__(self, x, y, width, height, image, type):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.image = image
        self.image = pygame.transform.scale(
            self.image, (self.width, self.height))
        self.rect = self.image.get_rect(topleft=(self.x, self.y))
        self.type = type

        self.speed = 1
        self.timer = 0

    def draw(self):
        screen.blit(self.image, self.rect)

    def collision(self, player, collectable_items):
        if self.rect.colliderect(player.rect):
            collectable_items.remove(self)

    def move(self):
        self.rect.y += self.speed
        if self.timer > 20:
            self.timer = 0
            self.speed = -self.speed
        self.timer += 1

    def update(self, player, collectable_items):
        self.draw()
        self.collision(player, collectable_items)
        self.move()


class Gun(AbstractCollectableItem):
    def __init__(self, x, y, width, height, image, type):
        super().__init__(x, y, width, height, image, type)
        self.first = True
        self.last_direction = ''
        self.on_player = False

    def transform_image(self, flip, angle):
        image = gun
        image = pygame.transform.flip(
            image, flip, False)
        image = pygame.transform.scale(
            image, (self.width, self.height))
        image = pygame.transform.rotate(image, angle)
        return image

    def animation(self, player):
        if player.direction == 'down' and self.last_direction != 'down':
            self.last_direction = player.direction
            self.image = self.transform_image(True, 20)

        elif player.direction == 'right' and self.last_direction != 'right':
            self.last_direction = player.direction
            self.image = self.transform_image(False, -20)

        elif player.direction == 'up' and self.last_direction != 'up' or player.direction == 'left' and self.last_direction != 'left':
            self.last_direction = player.direction
            self.image = pygame.transform.scale(self.image, (1, 1))

    def collision(self, player, guns):
        if self.rect.colliderect(player.rect):
            self.rect.x = player.rect.centerx - \
                20 if self.last_direction == 'down' else player.rect.centerx
            self.rect.y = player.rect.centery

            self.animation(player)

            if self.first:
                self.on_player = True
                player.ammo = 5
                player.armed = True
                self.first = False

            if player.ammo <= 0:
                guns.remove(self)
                player.armed = False


class ObjectSpawner:
    def __init__(self, delay, list):
        self.timer = 0
        self.delay = delay
        self.list = list

        self.delete_timer = 0

    def spawn(self, object):
        if self.timer > self.delay:
            self.list.append(object)
            self.timer = 0

        self.timer += 1

    def delete(self, delay):
        if self.delete_timer > delay:
            self.list.pop(0)
            self.delete_timer = 0
        self.delete_timer += 1


class Particle:
    def __init__(self):
        self.particles = []

    def emit(self):
        if self.particles:
            self.delete_particles()
            for particle in self.particles:
                particle[0][1] += particle[2][0]
                particle[0][0] += particle[2][1]
                particle[1] -= 1
                # pygame.draw.circle(screen, choice([WHITE, ORANGE]),
                # particle[0], int(particle[1]))
                rect = pygame.Rect(
                    particle[0][0], particle[0][1], int(particle[1]), int(particle[1]))
                pygame.draw.rect(screen, choice([WHITE, ORANGE]), rect)

    def add_particles(self, x, y, radius=20, direction_x=(-5, 0), direction_y=(-5, 0)):
        """pos_x = x
        pos_y = y
        radius = radius"""
        direction_x = randint(direction_x[0], direction_x[1])
        direction_y = randint(direction_y[0], direction_y[1])
        particle_circle = [[x, y], radius, [direction_x, direction_y]]
        self.particles.append(particle_circle)

    def delete_particles(self):
        particle_copy = [
            particle for particle in self.particles if particle[1] > 0]
        self.particles = particle_copy


class FireBall:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.fireball = Particle()
        self.timer = 0

        self.target_x = 0
        self.target_y = 0

    def move(self, player):

        if self.timer < 1 * FPS:
            self.target_x = player.rect.centerx + randint(-1, 1) * PIXELS
            self.target_y = player.rect.centery + randint(-1, 1) * PIXELS
            self.timer += 1

        self.directionx = (self.target_x - self.x)
        self.directiony = (self.target_y - self.y)

        self.x += 8 if self.directionx > 0 else -8
        self.y += 4 if self.directiony > 0 else -4

        self.fireball.add_particles(self.x, self.y)

    def update(self, player):
        self.move(player)
        self.fireball.emit()


class HealthBar:
    def __init__(self, x, y, max_health):
        self.x = x
        self.y = y
        self.health = max_health
        self.max_health = max_health

    def draw(self, health):
        self.health = health
        ratio = self.health / self.max_health
        if ratio < 0:
            ratio = 0
        pygame.draw.rect(screen, BLACK, (self.x - 2, self.y - 2, 154, 24))
        pygame.draw.rect(screen, RED, (self.x, self.y, 150, 20))
        pygame.draw.rect(screen, GREEN,
                         (self.x, self.y, 150 * ratio, 20))


class Game:
    def __init__(self):
        pass


def main():
    # Create Map
    iso_map = IsoMap(MAP, Block)
    iso_map.create_map()

    player = Player(40, 40, PIXELS - 12, PIXELS - 8)
    enemy = Enemy(40, 40, PIXELS - 12, PIXELS - 8, player)

    enemies = []

    fireball = FireBall(100, 100)
    fireballs = []

    health_bar = HealthBar(50, 50, 100)

    direction = ''
    step_index = 0

    collectable_items = [Gun(
        115, 215, PIXELS - 37, PIXELS - 45, gun, 'heal')]

    bullets = []

    object_spawner = ObjectSpawner(1 * FPS, collectable_items)
    enemy_spawner = ObjectSpawner(5 * FPS, enemies)
    fireball_spawner = ObjectSpawner(2 * FPS, fireballs)

    while True:
        screen.fill(GREY)
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                exit()

        keys = pygame.key.get_pressed()
        if step_index >= 16:
            if keys[pygame.K_UP] or keys[pygame.K_w]:
                direction = 'up'
                step_index = 0
            if keys[pygame.K_DOWN] or keys[pygame.K_s]:
                direction = 'down'
                step_index = 0
            if keys[pygame.K_LEFT] or keys[pygame.K_a]:
                direction = 'left'
                step_index = 0
            if keys[pygame.K_RIGHT] or keys[pygame.K_d]:
                direction = 'right'
                step_index = 0

            if keys[pygame.K_SPACE] and player.shoot_cooldown < 0 and player.armed:
                player.fire = True
                player.shoot_cooldown = 10

        else:
            step_index += 1
            player.move(direction)
            player.animation()

        iso_map.draw(player, enemies)

        player.shoot(bullets)

        for item in collectable_items:
            item.update(player, collectable_items)

        # Spawn Guns

        object_spawner.spawn(Gun((randint(100, WIDTH - 100) % 64) * 40,
                                 (randint(100, HEIGHT - 100) % 64) * 40, PIXELS - 37, PIXELS - 45, gun, 'gun'))

        # if enemies == []:
        enemy_spawner.spawn(Enemy(40, 40,
                                  PIXELS - 12, PIXELS - 8, player))

        for bullet in bullets:
            bullet.update(direction)
            for enemy in enemies:
                enemy.bullet_collision(bullet)

        fireball_spawner.spawn(FireBall(-100, -100))
        for fireball in fireballs:
            fireball.update(player)
            player.collision_fireball(fireball)
            fireball_spawner.delete(10 * FPS)

        health_bar.draw(player.health)

        pygame.display.update()
        clock.tick(FPS)


if __name__ == "__main__":
    main()
